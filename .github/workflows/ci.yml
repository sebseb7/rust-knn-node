name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy
        
    - name: Cache Rust Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Create root Cargo.toml
      shell: bash
      run: |
        echo 'Creating root Cargo.toml file'
        cat > Cargo.toml << EOF
        [workspace]
        members = ["native"]
        resolver = "2"

        [profile.release]
        lto = true
        EOF

    - name: Install dependencies
      run: npm install
      
    - name: Debug Cargo.toml files
      shell: bash
      run: |
        echo "Root Cargo.toml:"
        cat Cargo.toml
        echo ""
        echo "Native Cargo.toml:"
        cat native/Cargo.toml
        
    - name: Create index.js for native module
      shell: bash
      run: |
        mkdir -p native
        cat > native/index.js << 'EOF'
        const path = require('path');
        module.exports = require('./rust-knn-node.node');
        EOF
        
    - name: Build library (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # Build from the workspace root
        cargo build --release
        
        # Check directory structure
        echo "Workspace directory structure:"
        find . -type d -maxdepth 3
        
        # Find all DLL files
        echo "All DLL files:"
        find . -name "*.dll"
        
        # Copy the library to the expected location
        mkdir -p native
        find . -name "rust_knn_node.dll" -exec cp {} native/rust-knn-node.node \; || \
        find . -name "librust_knn_node.dll" -exec cp {} native/rust-knn-node.node \; || \
        echo "Could not find the DLL file"
        
        # List directory to verify
        ls -la native/
      
    - name: Build library (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Build from the workspace root
        MACOSX_DEPLOYMENT_TARGET=10.13 cargo build --release
        
        # Check directory structure
        echo "Workspace directory structure:"
        find . -type d -maxdepth 3
        
        # Find all dylib files
        echo "All dylib files:"
        find . -name "*.dylib"
        
        # Copy the library to the expected location
        mkdir -p native
        
        # Use direct path if we know where it is
        cp target/release/librust_knn_node.dylib native/rust-knn-node.node || \
        find . -name "librust_knn_node.dylib" -exec cp {} native/rust-knn-node.node \; || \
        echo "Could not find the dylib file"
        
        # List directory to verify
        ls -la native/
        
        # On macOS, we might need to adjust the binary
        install_name_tool -id @loader_path/librust_knn_node.dylib native/rust-knn-node.node || true
        
    - name: Build library (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        # Build from the workspace root
        cargo build --release
        
        # Check directory structure
        echo "Workspace directory structure:"
        find . -type d -maxdepth 3
        
        # Find all shared objects
        echo "All shared object files:"
        find . -name "*.so"
        
        # Copy the library to the expected location
        mkdir -p native
        find . -name "librust_knn_node.so" -exec cp {} native/rust-knn-node.node \; || \
        echo "Could not find the so file"
        
        # List directory to verify
        ls -la native/
      
    - name: Create package.json for native module
      shell: bash
      run: |
        cat > native/package.json << 'EOF'
        {
          "name": "rust-knn-node-native",
          "version": "1.0.0",
          "description": "Native bindings for rust_knn",
          "main": "index.js",
          "files": ["rust-knn-node.node", "index.js"]
        }
        EOF
        
        # List directory to verify
        ls -la native/
      
    - name: Create test file
      run: |
        cat > test.js << 'EOF'
        // Debug info
        console.log("Debug: Current working directory:", process.cwd());
        console.log("Debug: Directory contents of 'native':");
        const fs = require('fs');
        try {
          console.log(fs.readdirSync('./native'));
        } catch (e) {
          console.log("Error reading native dir:", e.message);
        }
        
        const RustKNN = require('./src');
        
        // Test data
        const strings = ['apple', 'banana', 'orange'];
        
        // Test upload
        try {
          RustKNN.uploadStrings(strings);
          console.log('✓ Upload successful');
        } catch (err) {
          console.error('✗ Upload failed:', err);
          process.exit(1);
        }
        
        // Test search (word order sensitive)
        try {
          const results = RustKNN.findNearestNeighbors('aple', 2);
          console.log('✓ Word order sensitive search successful:', results);
          if (!results.includes('apple')) {
            console.error('✗ Expected "apple" in results');
            process.exit(1);
          }
        } catch (err) {
          console.error('✗ Word order sensitive search failed:', err);
          process.exit(1);
        }
        
        // Test search (word order independent)
        try {
          const results = RustKNN.findNearestNeighbors('aple', 2, false);
          console.log('✓ Word order independent search successful:', results);
          if (!results.includes('apple')) {
            console.error('✗ Expected "apple" in results');
            process.exit(1);
          }
        } catch (err) {
          console.error('✗ Word order independent search failed:', err);
          process.exit(1);
        }
        
        console.log('✓ All tests passed!');
        EOF
      shell: bash
      
    - name: Run tests
      run: node test.js 